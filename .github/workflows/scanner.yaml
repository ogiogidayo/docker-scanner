name: Docker and Package Security Scan

on:
  pull_request:
    paths:
      - '**/Dockerfile'
      - '**/package.json'

jobs:
  scan:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Find Dockerfiles
        id: find-dockerfiles
        run: |
          files=$(find . -type f -name Dockerfile)
          if [ -z "$files" ]; then
            echo "No Dockerfile found."
            exit 0
          fi
          echo "found-dockerfiles=$files" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ github.ref }}
            refs/head/master

      - name: Build Docker images
        if: env.found-dockerfiles != ''
        run: |
          for dockerfile in ${{ env.found-dockerfiles }}; do
            image_name=$(basename $(dirname $dockerfile))
            docker build -t $image_name -f $dockerfile .
          done

      - name: Setup Trivy
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          version: latest

      - name: Scan Docker images for OS vulnerabilities
        if: env.found-dockerfiles != ''
        run: |
          for dockerfile in ${{ env.found-dockerfiles }}; do
            image_name=$(basename $(dirname $dockerfile))
            trivy image --format table --output ${image_name}-os-trivy-result.txt $image_name
          done

      - name: Find package.json files
        id: find-package-json
        run: |
          files=$(find . -type f -name package.json)
          if [ -z "$files" ]; then
            echo "No package.json found."
            exit 0
          fi
          echo "found-package-json=$files" >> $GITHUB_ENV

      - name: Cache npm dependencies
        if: env.found-package-json != ''
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-

      - name: Install npm dependencies and scan packages
        if: env.found-package-json != ''
        run: |
          for package_json in ${{ env.found-package-json }}; do
            dir=$(dirname $package_json)
            cd $dir
            npm install
            trivy fs --security-checks vuln --scanners vuln --format table --output npm-trivy-result.txt .
            cd -
          done

      - name: Format Trivy results for PR comment
        run: |
          echo "### OS Package Vulnerability Report" > formatted-trivy-result.md
          if [ -n "${{ env.found-dockerfiles }}" ]; then
            for dockerfile in ${{ env.found-dockerfiles }}; do
              image_name=$(basename $(dirname $dockerfile))
              echo "#### $image_name" >> formatted-trivy-result.md
              cat ${image_name}-os-trivy-result.txt >> formatted-trivy-result.md
            done
          fi
          echo "\n### NPM Package Vulnerability Report" >> formatted-trivy-result.md
          if [ -n "${{ env.found-package-json }}" ]; then
            for package_json in ${{ env.found-package-json }}; do
              dir=$(basename $(dirname $package_json))
              echo "#### $dir" >> formatted-trivy-result.md
              cat $dir/npm-trivy-result.txt >> formatted-trivy-result.md
            done
          fi

      - name: Post comment to PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: formatted-trivy-result.md
          recreate: true

      - name: Clean up temporary files and move cache
        run: |
          rm -f *.txt formatted-trivy-result.md
          rm -rf /tmp/.buildx-cache && mv /tmp/.buildx-cache-new /tmp/.buildx-cache